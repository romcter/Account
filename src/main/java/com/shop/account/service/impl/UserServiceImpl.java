package com.shop.account.service.impl;import com.shop.account.dto.UserDto;import com.shop.account.dto.UserMapper;import com.shop.account.entity.User;import com.shop.account.exception.ResourceNotFoundException;import com.shop.account.repository.UserRepository;import com.shop.account.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.stereotype.Service;import javax.persistence.EntityNotFoundException;import java.util.Optional;@Servicepublic class UserServiceImpl implements UserService {    @Autowired    private UserRepository userRepository;    @Override    public UserDto getUser(Long id) {        try {            Optional<User> user = userRepository.findById(id);            return isPresentUser(user);        } catch (EntityNotFoundException ex) {            throw new ResourceNotFoundException(ex.getMessage());        }    }    @Override    public UserDto addUser(UserDto userDto) {        User user = userRepository.save(UserMapper.INSTANCE.userDtoToUser(userDto));        return UserMapper.INSTANCE.userToUserDto(user);    }    @Override    public UserDto updateUser(UserDto userDto) {        try {            if (!userRepository.existsById(userDto.getId())) {                Optional<User> user = userRepository.findById(userDto.getId());                return isPresentUser(user);            }            else throw new EntityNotFoundException();        } catch (EntityNotFoundException ex) {            throw new ResourceNotFoundException(ex.getMessage());        }    }    @Override    public void deleteUser(Long id) {        try {            userRepository.deleteById(id);        } catch (EmptyResultDataAccessException ex) {            throw new ResourceNotFoundException(ex.getMessage());        }    }    private UserDto isPresentUser(Optional<User> user){        if(user.isPresent())            return UserMapper.INSTANCE.userToUserDto(user.get());        else throw new EntityNotFoundException();    }}